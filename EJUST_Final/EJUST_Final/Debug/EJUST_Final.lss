
EJUST_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000deb  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000944  00000000  00000000  00001207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a6  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042d  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002bee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <KPD_Init>:
	{'1', '2', '3', '-'},
    {'C', '0', '=', '+'}
};

void KPD_Init(){
    ROW1_DDR |= 0x0C; // Set PD2, PD3 as output
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 60       	ori	r24, 0x0C	; 12
  aa:	8a b9       	out	0x0a, r24	; 10
    ROW2_DDR |= 0x30; // Set PB4, PB5 as output
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	84 b9       	out	0x04, r24	; 4
    COL_DDR &= ~0x0F; // Set PC0, PC1, PC2, PC3 as input
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	87 b9       	out	0x07, r24	; 7
    COL_PORT |= 0x0F; // Enable pull-up resistors on PC0, PC1, PC2, PC3
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8f 60       	ori	r24, 0x0F	; 15
  bc:	88 b9       	out	0x08, r24	; 8
  be:	08 95       	ret

000000c0 <KPD_GetPressedKey>:
}

unsigned char KPD_GetPressedKey(void) {
    for (int row = 0; row < ROWS; row++) {
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	59 c0       	rjmp	.+178    	; 0x178 <KPD_GetPressedKey+0xb8>
        // Reset the row pins
        ROW1_PORT |= 0x0C;
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8c 60       	ori	r24, 0x0C	; 12
  ca:	8b b9       	out	0x0b, r24	; 11
        ROW2_PORT |= 0x30;
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	80 63       	ori	r24, 0x30	; 48
  d0:	85 b9       	out	0x05, r24	; 5

        switch (row) {
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	51 05       	cpc	r21, r1
  d6:	81 f0       	breq	.+32     	; 0xf8 <KPD_GetPressedKey+0x38>
  d8:	24 f4       	brge	.+8      	; 0xe2 <KPD_GetPressedKey+0x22>
  da:	41 15       	cp	r20, r1
  dc:	51 05       	cpc	r21, r1
  de:	41 f0       	breq	.+16     	; 0xf0 <KPD_GetPressedKey+0x30>
  e0:	16 c0       	rjmp	.+44     	; 0x10e <KPD_GetPressedKey+0x4e>
  e2:	42 30       	cpi	r20, 0x02	; 2
  e4:	51 05       	cpc	r21, r1
  e6:	61 f0       	breq	.+24     	; 0x100 <KPD_GetPressedKey+0x40>
  e8:	43 30       	cpi	r20, 0x03	; 3
  ea:	51 05       	cpc	r21, r1
  ec:	69 f0       	breq	.+26     	; 0x108 <KPD_GetPressedKey+0x48>
  ee:	0f c0       	rjmp	.+30     	; 0x10e <KPD_GetPressedKey+0x4e>
            case 0:
                ROW1_PORT &= ~(1 << 2); // Ground PD2
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	8b b9       	out	0x0b, r24	; 11
                break;
  f6:	0b c0       	rjmp	.+22     	; 0x10e <KPD_GetPressedKey+0x4e>
            case 1:
                ROW1_PORT &= ~(1 << 3); // Ground PD3
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	8b b9       	out	0x0b, r24	; 11
                break;
  fe:	07 c0       	rjmp	.+14     	; 0x10e <KPD_GetPressedKey+0x4e>
            case 2:
                ROW2_PORT &= ~(1 << 4); // Ground PB4
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	85 b9       	out	0x05, r24	; 5
                break;
 106:	03 c0       	rjmp	.+6      	; 0x10e <KPD_GetPressedKey+0x4e>
            case 3:
                ROW2_PORT &= ~(1 << 5); // Ground PB5
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <KPD_GetPressedKey+0x52>
 116:	00 c0       	rjmp	.+0      	; 0x118 <KPD_GetPressedKey+0x58>
 118:	00 00       	nop
                break;
        }

        _delay_ms(5); // Debounce delay

        for (int col = 0; col < COLS; col++) {
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	27 c0       	rjmp	.+78     	; 0x16e <KPD_GetPressedKey+0xae>
            if (!(COL_PIN & (1 << col))) { // If a key is pressed
 120:	86 b1       	in	r24, 0x06	; 6
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <KPD_GetPressedKey+0x6c>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <KPD_GetPressedKey+0x68>
 130:	80 fd       	sbrc	r24, 0
 132:	1b c0       	rjmp	.+54     	; 0x16a <KPD_GetPressedKey+0xaa>
                while (!(COL_PIN & (1 << col))); // Wait for the key to be released
 134:	86 b1       	in	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <KPD_GetPressedKey+0x80>
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <KPD_GetPressedKey+0x7c>
 144:	80 ff       	sbrs	r24, 0
 146:	f6 cf       	rjmp	.-20     	; 0x134 <KPD_GetPressedKey+0x74>
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <KPD_GetPressedKey+0x8c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <KPD_GetPressedKey+0x92>
 152:	00 00       	nop
                _delay_ms(5); // Debounce delay
                return keys[row][col]; // Return the key value
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	40 50       	subi	r20, 0x00	; 0
 15e:	5f 4f       	sbci	r21, 0xFF	; 255
 160:	fa 01       	movw	r30, r20
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	08 95       	ret
                break;
        }

        _delay_ms(5); // Debounce delay

        for (int col = 0; col < COLS; col++) {
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	24 30       	cpi	r18, 0x04	; 4
 170:	31 05       	cpc	r19, r1
 172:	b4 f2       	brlt	.-84     	; 0x120 <KPD_GetPressedKey+0x60>
    COL_DDR &= ~0x0F; // Set PC0, PC1, PC2, PC3 as input
    COL_PORT |= 0x0F; // Enable pull-up resistors on PC0, PC1, PC2, PC3
}

unsigned char KPD_GetPressedKey(void) {
    for (int row = 0; row < ROWS; row++) {
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	44 30       	cpi	r20, 0x04	; 4
 17a:	51 05       	cpc	r21, r1
 17c:	0c f4       	brge	.+2      	; 0x180 <KPD_GetPressedKey+0xc0>
 17e:	a3 cf       	rjmp	.-186    	; 0xc6 <KPD_GetPressedKey+0x6>
                return keys[row][col]; // Return the key value
            }
        }
    }

    return '\0'; // No key pressed
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret

00000184 <send_Nibble>:
#include <util/delay.h>
#include "LCD.h"

void send_Nibble(unsigned char data)
{
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	89 2b       	or	r24, r25
 18c:	8b b9       	out	0x0b, r24	; 11
	CONTROL_PORT |= (1<<E);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	88 60       	ori	r24, 0x08	; 8
 192:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <send_Nibble+0x12>
 19a:	00 00       	nop
	_delay_us(1);
	CONTROL_PORT &= ~(1<<E);
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <send_Nibble+0x22>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <send_Nibble+0x28>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <send_Byte>:
	_delay_us(200);
}

void send_Byte(unsigned char data)
{
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
	send_Nibble(data); // upper nibble first
 1b4:	0e 94 c2 00 	call	0x184	; 0x184 <send_Nibble>
	send_Nibble(data << 4); // then lower nibble
 1b8:	8c 2f       	mov	r24, r28
 1ba:	82 95       	swap	r24
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	0e 94 c2 00 	call	0x184	; 0x184 <send_Nibble>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <LCD_sendCommand>:

void LCD_sendCommand(unsigned char command)
{
	CONTROL_PORT &= ~(1<<RS);
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	9e 7f       	andi	r25, 0xFE	; 254
 1ca:	95 b9       	out	0x05, r25	; 5
	send_Byte(command);
 1cc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9f e1       	ldi	r25, 0x1F	; 31
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_sendCommand+0xe>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_sendCommand+0x14>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <LCD_sendData>:
	_delay_ms(2);
}

void LCD_sendData(unsigned char data)
{
	CONTROL_PORT |= (1<<RS);
 1de:	95 b1       	in	r25, 0x05	; 5
 1e0:	91 60       	ori	r25, 0x01	; 1
 1e2:	95 b9       	out	0x05, r25	; 5
	send_Byte(data);
 1e4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <send_Byte>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	9f e1       	ldi	r25, 0x1F	; 31
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_sendData+0xe>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_sendData+0x14>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init()
{
	CONTROL_DDR |= (1<<RS) | (1<<RW) | (1<<E);
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	8d 60       	ori	r24, 0x0D	; 13
 1fa:	84 b9       	out	0x04, r24	; 4
	LCD_DDR = 0xF0; // upper nibble as output
 1fc:	80 ef       	ldi	r24, 0xF0	; 240
 1fe:	8a b9       	out	0x0a, r24	; 10
	CONTROL_PORT &= ~(1<<RW); // write mode
 200:	85 b1       	in	r24, 0x05	; 5
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	85 b9       	out	0x05, r24	; 5
 206:	8f e5       	ldi	r24, 0x5F	; 95
 208:	9a ee       	ldi	r25, 0xEA	; 234
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_Init+0x14>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_Init+0x1a>
 210:	00 00       	nop
	_delay_ms(15);

	LCD_sendCommand(0x33); // initialization sequence
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x32);
 218:	82 e3       	ldi	r24, 0x32	; 50
 21a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x28); // 4-bit mode, 2 lines, 5x7 font
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x0C); // display on, cursor off, blink off
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x06); // increment mode, entire shift off
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x01); // clear display, set DDRAM address to 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
 236:	08 95       	ret

00000238 <main>:
#include "Keypad.h"

unsigned char Local_u8Key;

int main(void){
	LCD_Init();
 238:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_Init>
	KPD_Init();
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <KPD_Init>

    while (1){
		// Get the pressed key
		Local_u8Key = KPD_GetPressedKey();
 240:	0e 94 60 00 	call	0xc0	; 0xc0 <KPD_GetPressedKey>
 244:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>

		if (Local_u8Key != '\0') {
 248:	81 11       	cpse	r24, r1
			// A key was pressed, print it to the serial port
			LCD_sendData(Local_u8Key);
 24a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_sendData>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	80 e7       	ldi	r24, 0x70	; 112
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x26>
 25e:	00 00       	nop
 260:	ef cf       	rjmp	.-34     	; 0x240 <main+0x8>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
