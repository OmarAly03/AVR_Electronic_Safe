
FinalProject_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  000005ee  00000682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001c4  008001c4  00000746  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000167c  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abb  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b8b  00000000  00000000  000029ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f2  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000610  00000000  00000000  00003d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 3c       	cpi	r26, 0xC4	; 196
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 ec       	ldi	r26, 0xC4	; 196
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 3c       	cpi	r26, 0xCE	; 206
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  9e:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <KPD_Init>:
	{'1', '2', '3', 'C'},
    {'*', '0', '#', 'D'}
};

void KPD_Init(){
    ROW1_DDR |= 0x0C; // Set PD2, PD3 as output
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8c 60       	ori	r24, 0x0C	; 12
  aa:	8a b9       	out	0x0a, r24	; 10
    ROW2_DDR |= 0x30; // Set PB4, PB5 as output
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	84 b9       	out	0x04, r24	; 4
    COL_DDR &= ~0x0F; // Set PC0, PC1, PC2, PC3 as input
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	87 b9       	out	0x07, r24	; 7
    COL_PORT |= 0x0F; // Enable pull-up resistors on PC0, PC1, PC2, PC3
  b8:	88 b1       	in	r24, 0x08	; 8
  ba:	8f 60       	ori	r24, 0x0F	; 15
  bc:	88 b9       	out	0x08, r24	; 8
  be:	08 95       	ret

000000c0 <KPD_GetPressedKey>:
}

unsigned char KPD_GetPressedKey(void) {
    for (int row = 0; row < ROWS; row++) {
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	59 c0       	rjmp	.+178    	; 0x178 <KPD_GetPressedKey+0xb8>
        // Reset the row pins
        ROW1_PORT |= 0x0C;
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8c 60       	ori	r24, 0x0C	; 12
  ca:	8b b9       	out	0x0b, r24	; 11
        ROW2_PORT |= 0x30;
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	80 63       	ori	r24, 0x30	; 48
  d0:	85 b9       	out	0x05, r24	; 5

        switch (row) {
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	51 05       	cpc	r21, r1
  d6:	81 f0       	breq	.+32     	; 0xf8 <KPD_GetPressedKey+0x38>
  d8:	24 f4       	brge	.+8      	; 0xe2 <KPD_GetPressedKey+0x22>
  da:	41 15       	cp	r20, r1
  dc:	51 05       	cpc	r21, r1
  de:	41 f0       	breq	.+16     	; 0xf0 <KPD_GetPressedKey+0x30>
  e0:	16 c0       	rjmp	.+44     	; 0x10e <KPD_GetPressedKey+0x4e>
  e2:	42 30       	cpi	r20, 0x02	; 2
  e4:	51 05       	cpc	r21, r1
  e6:	61 f0       	breq	.+24     	; 0x100 <KPD_GetPressedKey+0x40>
  e8:	43 30       	cpi	r20, 0x03	; 3
  ea:	51 05       	cpc	r21, r1
  ec:	69 f0       	breq	.+26     	; 0x108 <KPD_GetPressedKey+0x48>
  ee:	0f c0       	rjmp	.+30     	; 0x10e <KPD_GetPressedKey+0x4e>
            case 0:
                ROW1_PORT &= ~(1 << 2); // Ground PD2
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	8b b9       	out	0x0b, r24	; 11
                break;
  f6:	0b c0       	rjmp	.+22     	; 0x10e <KPD_GetPressedKey+0x4e>
            case 1:
                ROW1_PORT &= ~(1 << 3); // Ground PD3
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	8b b9       	out	0x0b, r24	; 11
                break;
  fe:	07 c0       	rjmp	.+14     	; 0x10e <KPD_GetPressedKey+0x4e>
            case 2:
                ROW2_PORT &= ~(1 << 4); // Ground PB4
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8f 7e       	andi	r24, 0xEF	; 239
 104:	85 b9       	out	0x05, r24	; 5
                break;
 106:	03 c0       	rjmp	.+6      	; 0x10e <KPD_GetPressedKey+0x4e>
            case 3:
                ROW2_PORT &= ~(1 << 5); // Ground PB5
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	81 ee       	ldi	r24, 0xE1	; 225
 110:	94 e0       	ldi	r25, 0x04	; 4
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <KPD_GetPressedKey+0x52>
 116:	00 c0       	rjmp	.+0      	; 0x118 <KPD_GetPressedKey+0x58>
 118:	00 00       	nop
                break;
        }

        _delay_ms(5); // Debounce delay

        for (int col = 0; col < COLS; col++) {
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	27 c0       	rjmp	.+78     	; 0x16e <KPD_GetPressedKey+0xae>
            if (!(COL_PIN & (1 << col))) { // If a key is pressed
 120:	86 b1       	in	r24, 0x06	; 6
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 2e       	mov	r0, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <KPD_GetPressedKey+0x6c>
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <KPD_GetPressedKey+0x68>
 130:	80 fd       	sbrc	r24, 0
 132:	1b c0       	rjmp	.+54     	; 0x16a <KPD_GetPressedKey+0xaa>
                while (!(COL_PIN & (1 << col))); // Wait for the key to be released
 134:	86 b1       	in	r24, 0x06	; 6
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <KPD_GetPressedKey+0x80>
 13c:	95 95       	asr	r25
 13e:	87 95       	ror	r24
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <KPD_GetPressedKey+0x7c>
 144:	80 ff       	sbrs	r24, 0
 146:	f6 cf       	rjmp	.-20     	; 0x134 <KPD_GetPressedKey+0x74>
 148:	81 ee       	ldi	r24, 0xE1	; 225
 14a:	94 e0       	ldi	r25, 0x04	; 4
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <KPD_GetPressedKey+0x8c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <KPD_GetPressedKey+0x92>
 152:	00 00       	nop
                _delay_ms(5); // Debounce delay
                return keys[row][col]; // Return the key value
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	40 50       	subi	r20, 0x00	; 0
 15e:	5f 4f       	sbci	r21, 0xFF	; 255
 160:	fa 01       	movw	r30, r20
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	80 81       	ld	r24, Z
 168:	08 95       	ret
                break;
        }

        _delay_ms(5); // Debounce delay

        for (int col = 0; col < COLS; col++) {
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	24 30       	cpi	r18, 0x04	; 4
 170:	31 05       	cpc	r19, r1
 172:	b4 f2       	brlt	.-84     	; 0x120 <KPD_GetPressedKey+0x60>
    COL_DDR &= ~0x0F; // Set PC0, PC1, PC2, PC3 as input
    COL_PORT |= 0x0F; // Enable pull-up resistors on PC0, PC1, PC2, PC3
}

unsigned char KPD_GetPressedKey(void) {
    for (int row = 0; row < ROWS; row++) {
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	44 30       	cpi	r20, 0x04	; 4
 17a:	51 05       	cpc	r21, r1
 17c:	0c f4       	brge	.+2      	; 0x180 <KPD_GetPressedKey+0xc0>
 17e:	a3 cf       	rjmp	.-186    	; 0xc6 <KPD_GetPressedKey+0x6>
                return keys[row][col]; // Return the key value
            }
        }
    }

    return '\0'; // No key pressed
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret

00000184 <send_Nibble>:
#include <util/delay.h>
#include "LCD.h"

void send_Nibble(unsigned char data)
{
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
 184:	9b b1       	in	r25, 0x0b	; 11
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	89 2b       	or	r24, r25
 18c:	8b b9       	out	0x0b, r24	; 11
	CONTROL_PORT |= (1<<E);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	88 60       	ori	r24, 0x08	; 8
 192:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <send_Nibble+0x12>
 19a:	00 00       	nop
	_delay_us(1);
	CONTROL_PORT &= ~(1<<E);
 19c:	85 b1       	in	r24, 0x05	; 5
 19e:	87 7f       	andi	r24, 0xF7	; 247
 1a0:	85 b9       	out	0x05, r24	; 5
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <send_Nibble+0x22>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <send_Nibble+0x28>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <send_Byte>:
	_delay_us(200);
}

void send_Byte(unsigned char data)
{
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
	send_Nibble(data); // upper nibble first
 1b4:	0e 94 c2 00 	call	0x184	; 0x184 <send_Nibble>
	send_Nibble(data << 4); // then lower nibble
 1b8:	8c 2f       	mov	r24, r28
 1ba:	82 95       	swap	r24
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	0e 94 c2 00 	call	0x184	; 0x184 <send_Nibble>
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <LCD_sendCommand>:

void LCD_sendCommand(unsigned char command)
{
	CONTROL_PORT &= ~(1<<RS);
 1c6:	95 b1       	in	r25, 0x05	; 5
 1c8:	9e 7f       	andi	r25, 0xFE	; 254
 1ca:	95 b9       	out	0x05, r25	; 5
	send_Byte(command);
 1cc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <send_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9f e1       	ldi	r25, 0x1F	; 31
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_sendCommand+0xe>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_sendCommand+0x14>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <LCD_sendData>:
	_delay_ms(2);
}

void LCD_sendData(unsigned char data)
{
	CONTROL_PORT |= (1<<RS);
 1de:	95 b1       	in	r25, 0x05	; 5
 1e0:	91 60       	ori	r25, 0x01	; 1
 1e2:	95 b9       	out	0x05, r25	; 5
	send_Byte(data);
 1e4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <send_Byte>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	9f e1       	ldi	r25, 0x1F	; 31
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_sendData+0xe>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_sendData+0x14>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init()
{
	CONTROL_DDR |= (1<<RS) | (1<<RW) | (1<<E);
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	8d 60       	ori	r24, 0x0D	; 13
 1fa:	84 b9       	out	0x04, r24	; 4
	LCD_DDR = 0xF0; // upper nibble as output
 1fc:	80 ef       	ldi	r24, 0xF0	; 240
 1fe:	8a b9       	out	0x0a, r24	; 10
	CONTROL_PORT &= ~(1<<RW); // write mode
 200:	85 b1       	in	r24, 0x05	; 5
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	85 b9       	out	0x05, r24	; 5
 206:	8f e5       	ldi	r24, 0x5F	; 95
 208:	9a ee       	ldi	r25, 0xEA	; 234
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_Init+0x14>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_Init+0x1a>
 210:	00 00       	nop
	_delay_ms(15);

	LCD_sendCommand(0x33); // initialization sequence
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x32);
 218:	82 e3       	ldi	r24, 0x32	; 50
 21a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x28); // 4-bit mode, 2 lines, 5x7 font
 21e:	88 e2       	ldi	r24, 0x28	; 40
 220:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x0C); // display on, cursor off, blink off
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x06); // increment mode, entire shift off
 22a:	86 e0       	ldi	r24, 0x06	; 6
 22c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
	LCD_sendCommand(0x01); // clear display, set DDRAM address to 0
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
 236:	08 95       	ret

00000238 <LCD_sendString>:
}

void LCD_sendString(char* str)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	while(*str)
 23e:	0c c0       	rjmp	.+24     	; 0x258 <LCD_sendString+0x20>
	{
		LCD_sendData(*str++);
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_sendData>
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	86 e7       	ldi	r24, 0x76	; 118
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <LCD_sendString+0x14>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_sendString+0x1e>
 256:	00 00       	nop
	LCD_sendCommand(0x01); // clear display, set DDRAM address to 0
}

void LCD_sendString(char* str)
{
	while(*str)
 258:	88 81       	ld	r24, Y
 25a:	81 11       	cpse	r24, r1
 25c:	f1 cf       	rjmp	.-30     	; 0x240 <LCD_sendString+0x8>
	{
		LCD_sendData(*str++);
		_delay_ms(30);
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <LCD_Clear>:

void LCD_Clear()
{
	LCD_sendCommand(0x01); // clear display, set DDRAM address to 0
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9f e1       	ldi	r25, 0x1F	; 31
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_Clear+0xa>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_Clear+0x10>
 274:	00 00       	nop
 276:	08 95       	ret

00000278 <LCD_setPosition>:
void LCD_setPosition(unsigned char row, unsigned char col)
{
	unsigned char address;

	/* calculate DDRAM address */
	switch(row)
 278:	88 23       	and	r24, r24
 27a:	19 f0       	breq	.+6      	; 0x282 <LCD_setPosition+0xa>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	29 f4       	brne	.+10     	; 0x28a <LCD_setPosition+0x12>
	{
		case 0: address = 0x00 + col; break; // 1st row
		case 1: address = 0x40 + col; break; // 2nd row
 280:	60 5c       	subi	r22, 0xC0	; 192
		default: return; // invalid row
	}

	LCD_sendCommand(0x80 | address); // set DDRAM address
 282:	86 2f       	mov	r24, r22
 284:	80 68       	ori	r24, 0x80	; 128
 286:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_sendCommand>
 28a:	08 95       	ret

0000028c <main>:
unsigned char wifiCondition = 1;
unsigned char byPassLock = 0;
unsigned char unlocked = 0;

int main(void){
	LCD_Init();
 28c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_Init>
	KPD_Init();
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <KPD_Init>
	Servo_Init();
 294:	0e 94 bc 02 	call	0x578	; 0x578 <Servo_Init>
	ServoRotatePositive90();
 298:	0e 94 d7 02 	call	0x5ae	; 0x5ae <ServoRotatePositive90>
	USART_Init();
 29c:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Init>
	
    while (1){
		LCD_Clear();
 2a0:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
		LCD_setPosition(ROW1, COL0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
		LCD_sendString("Welcome Choose a");
 2ac:	84 e1       	ldi	r24, 0x14	; 20
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
		LCD_setPosition(ROW2, COL0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
		LCD_sendString("Mode to Unlock");
 2bc:	85 e2       	ldi	r24, 0x25	; 37
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	83 ed       	ldi	r24, 0xD3	; 211
 2c8:	90 e3       	ldi	r25, 0x30	; 48
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x3e>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x48>
 2d4:	00 00       	nop
		_delay_ms(1000);
		
		LCD_Clear();
 2d6:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
		LCD_setPosition(ROW1, COL0);
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
		LCD_sendString("1. Normal Mode");
 2e2:	84 e3       	ldi	r24, 0x34	; 52
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
		LCD_setPosition(ROW2, COL0);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
		LCD_sendString("2. WIFI Mode");
 2f2:	83 e4       	ldi	r24, 0x43	; 67
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
		
		do{
			Local_u8Key = KPD_GetPressedKey();
 2fa:	0e 94 60 00 	call	0xc0	; 0xc0 <KPD_GetPressedKey>
 2fe:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Local_u8Key>
		} while((Local_u8Key != '1') && (Local_u8Key != '2'));
 302:	9f ec       	ldi	r25, 0xCF	; 207
 304:	98 0f       	add	r25, r24
 306:	92 30       	cpi	r25, 0x02	; 2
 308:	c0 f7       	brcc	.-16     	; 0x2fa <main+0x6e>

		switch (Local_u8Key){
 30a:	81 33       	cpi	r24, 0x31	; 49
 30c:	09 f4       	brne	.+2      	; 0x310 <main+0x84>
 30e:	7b c0       	rjmp	.+246    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 310:	82 33       	cpi	r24, 0x32	; 50
 312:	09 f4       	brne	.+2      	; 0x316 <main+0x8a>
 314:	85 c0       	rjmp	.+266    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 316:	df c0       	rjmp	.+446    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
			case '1':
				for(unsigned char j = 0 ; ((j < NOOFATTEMPTS) && (!breakCondition) && (attempts)) ; j++){
					LCD_Clear();
 318:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
					LCD_setPosition(ROW1, COL0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
					LCD_sendString("Enter");
 324:	80 e5       	ldi	r24, 0x50	; 80
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
					LCD_setPosition(ROW2, COL0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
					LCD_sendString("Password: ");
 334:	86 e5       	ldi	r24, 0x56	; 86
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
					for(unsigned char i = 0 ; i < 4 ; i++){
 33c:	c0 e0       	ldi	r28, 0x00	; 0
 33e:	0e c0       	rjmp	.+28     	; 0x35c <main+0xd0>
						do{
							Local_u8Key = KPD_GetPressedKey();
 340:	0e 94 60 00 	call	0xc0	; 0xc0 <KPD_GetPressedKey>
 344:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Local_u8Key>
						} while(Local_u8Key == '\0');
 348:	88 23       	and	r24, r24
 34a:	d1 f3       	breq	.-12     	; 0x340 <main+0xb4>
						
						arr[i] = Local_u8Key;
 34c:	ec 2f       	mov	r30, r28
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	e8 53       	subi	r30, 0x38	; 56
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	80 83       	st	Z, r24
						LCD_sendData(Local_u8Key);
 356:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_sendData>
					LCD_Clear();
					LCD_setPosition(ROW1, COL0);
					LCD_sendString("Enter");
					LCD_setPosition(ROW2, COL0);
					LCD_sendString("Password: ");
					for(unsigned char i = 0 ; i < 4 ; i++){
 35a:	cf 5f       	subi	r28, 0xFF	; 255
 35c:	c4 30       	cpi	r28, 0x04	; 4
 35e:	80 f3       	brcs	.-32     	; 0x340 <main+0xb4>
						} while(Local_u8Key == '\0');
						
						arr[i] = Local_u8Key;
						LCD_sendData(Local_u8Key);
					}
					arr[4] = '\0';
 360:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <arr+0x4>
					
					unsigned char cond = 1;
					
					for(unsigned char i = 0 ; i < 5 ; i++){
 364:	20 e0       	ldi	r18, 0x00	; 0
						arr[i] = Local_u8Key;
						LCD_sendData(Local_u8Key);
					}
					arr[4] = '\0';
					
					unsigned char cond = 1;
 366:	c1 e0       	ldi	r28, 0x01	; 1
					
					for(unsigned char i = 0 ; i < 5 ; i++){
 368:	11 c0       	rjmp	.+34     	; 0x38c <main+0x100>
						if(arr[i] != pass[i]){
 36a:	82 2f       	mov	r24, r18
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	e8 53       	subi	r30, 0x38	; 56
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	30 81       	ld	r19, Z
 376:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <pass>
 37a:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <pass+0x1>
 37e:	fa 01       	movw	r30, r20
 380:	e8 0f       	add	r30, r24
 382:	f9 1f       	adc	r31, r25
 384:	80 81       	ld	r24, Z
 386:	38 13       	cpse	r19, r24
							cond = 0;
 388:	c0 e0       	ldi	r28, 0x00	; 0
					}
					arr[4] = '\0';
					
					unsigned char cond = 1;
					
					for(unsigned char i = 0 ; i < 5 ; i++){
 38a:	2f 5f       	subi	r18, 0xFF	; 255
 38c:	25 30       	cpi	r18, 0x05	; 5
 38e:	68 f3       	brcs	.-38     	; 0x36a <main+0xde>
						if(arr[i] != pass[i]){
							cond = 0;
						}
					}
					
					LCD_Clear();
 390:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
					if(cond){
 394:	cc 23       	and	r28, r28
 396:	81 f0       	breq	.+32     	; 0x3b8 <main+0x12c>
						LCD_Clear();
 398:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
						LCD_setPosition(ROW1, COL4);
 39c:	64 e0       	ldi	r22, 0x04	; 4
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
						LCD_sendString("Welcome");
 3a4:	81 e6       	ldi	r24, 0x61	; 97
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
						ServoRotateZero();
 3ac:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ServoRotateZero>
						breakCondition = 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <breakCondition>
 3b6:	25 c0       	rjmp	.+74     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
					}
					else{
						attempts--;
 3b8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <attempts>
 3bc:	81 50       	subi	r24, 0x01	; 1
 3be:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <attempts>
						LCD_Clear();
 3c2:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
						LCD_setPosition(ROW1, COL0);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
						LCD_sendString("Incorrect Pass");
 3ce:	89 e6       	ldi	r24, 0x69	; 105
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
						LCD_setPosition(ROW2, COL0);
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
						LCD_sendString("Attempts Left: ");
 3de:	88 e7       	ldi	r24, 0x78	; 120
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
						LCD_sendData((unsigned char)(attempts + '0'));
 3e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <attempts>
 3ea:	80 5d       	subi	r24, 0xD0	; 208
 3ec:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_sendData>
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	8f e0       	ldi	r24, 0x0F	; 15
 3f4:	97 e2       	ldi	r25, 0x27	; 39
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x16a>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
			Local_u8Key = KPD_GetPressedKey();
		} while((Local_u8Key != '1') && (Local_u8Key != '2'));

		switch (Local_u8Key){
			case '1':
				for(unsigned char j = 0 ; ((j < NOOFATTEMPTS) && (!breakCondition) && (attempts)) ; j++){
 402:	df 5f       	subi	r29, 0xFF	; 255
 404:	01 c0       	rjmp	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		
		do{
			Local_u8Key = KPD_GetPressedKey();
		} while((Local_u8Key != '1') && (Local_u8Key != '2'));

		switch (Local_u8Key){
 406:	d0 e0       	ldi	r29, 0x00	; 0
			case '1':
				for(unsigned char j = 0 ; ((j < NOOFATTEMPTS) && (!breakCondition) && (attempts)) ; j++){
 408:	d3 30       	cpi	r29, 0x03	; 3
 40a:	08 f0       	brcs	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40c:	64 c0       	rjmp	.+200    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 40e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <breakCondition>
 412:	81 11       	cpse	r24, r1
 414:	60 c0       	rjmp	.+192    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 416:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <attempts>
 41a:	81 11       	cpse	r24, r1
 41c:	7d cf       	rjmp	.-262    	; 0x318 <main+0x8c>
 41e:	5b c0       	rjmp	.+182    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
					}
				}
				break;
				
				case '2':
					wifiCondition = 1;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <wifiCondition>
					LCD_Clear();
 426:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
					LCD_setPosition(ROW1, COL3);
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
					LCD_sendString("Waiting...");
 432:	88 e8       	ldi	r24, 0x88	; 136
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
					while(wifiCondition){
 43a:	49 c0       	rjmp	.+146    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
						command = USART_Receive();
 43c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <USART_Receive>
 440:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <command>
						switch (command) {
 444:	8c 34       	cpi	r24, 0x4C	; 76
 446:	f1 f0       	breq	.+60     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 448:	85 35       	cpi	r24, 0x55	; 85
 44a:	09 f0       	breq	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44c:	40 c0       	rjmp	.+128    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
							case 'U':{
								LCD_Clear();
 44e:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
								LCD_setPosition(ROW1, COL4);
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
								LCD_sendString("Welcome");
 45a:	81 e6       	ldi	r24, 0x61	; 97
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
								ServoRotateZero();
 462:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ServoRotateZero>
 466:	2f ef       	ldi	r18, 0xFF	; 255
 468:	83 ed       	ldi	r24, 0xD3	; 211
 46a:	90 e3       	ldi	r25, 0x30	; 48
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
								_delay_ms(1000);
								command = '\0';
 478:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <command>
								unlocked = 1;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__data_end>
								break;
 482:	25 c0       	rjmp	.+74     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
							}
							case 'L':{
								if(unlocked){
 484:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__data_end>
 488:	88 23       	and	r24, r24
 48a:	f9 f0       	breq	.+62     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
									LCD_Clear();
 48c:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
									LCD_setPosition(ROW1, COL4);
 490:	64 e0       	ldi	r22, 0x04	; 4
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
									LCD_sendString("LOCKED !");
 498:	83 e9       	ldi	r24, 0x93	; 147
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
									ServoRotatePositive90();
 4a0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <ServoRotatePositive90>
									//ServoRotateNegative90();
									command = '\0';
 4a4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <command>
									wifiCondition = 0;
 4a8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <wifiCondition>
									byPassLock = 1;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <byPassLock>
									unlocked = 0;
 4b2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <__data_end>
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	83 ed       	ldi	r24, 0xD3	; 211
 4ba:	90 e3       	ldi	r25, 0x30	; 48
 4bc:	21 50       	subi	r18, 0x01	; 1
 4be:	80 40       	sbci	r24, 0x00	; 0
 4c0:	90 40       	sbci	r25, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c6:	00 00       	nop
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
									_delay_ms(1000);
									break;
								}
								command = '\0';
 4ca:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <command>
				case '2':
					wifiCondition = 1;
					LCD_Clear();
					LCD_setPosition(ROW1, COL3);
					LCD_sendString("Waiting...");
					while(wifiCondition){
 4ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <wifiCondition>
 4d2:	81 11       	cpse	r24, r1
 4d4:	b3 cf       	rjmp	.-154    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
					
				default:
					break;
		}
		
		if(!byPassLock){				
 4d6:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <byPassLock>
 4da:	81 11       	cpse	r24, r1
 4dc:	e1 ce       	rjmp	.-574    	; 0x2a0 <main+0x14>
			if(attempts){
 4de:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <attempts>
 4e2:	88 23       	and	r24, r24
 4e4:	49 f1       	breq	.+82     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				LCD_setPosition(ROW2, COL0);
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
				LCD_sendString("Press * to Lock");
 4ee:	8c e9       	ldi	r24, 0x9C	; 156
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
				
				do{
					Local_u8Key = KPD_GetPressedKey();
 4f6:	0e 94 60 00 	call	0xc0	; 0xc0 <KPD_GetPressedKey>
 4fa:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Local_u8Key>
				} while(Local_u8Key != '*');
 4fe:	8a 32       	cpi	r24, 0x2A	; 42
 500:	d1 f7       	brne	.-12     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
				
				LCD_Clear();
 502:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
				LCD_setPosition(ROW1, COL4);
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
				LCD_sendString("LOCKED !");
 50e:	83 e9       	ldi	r24, 0x93	; 147
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
				ServoRotatePositive90();
 516:	0e 94 d7 02 	call	0x5ae	; 0x5ae <ServoRotatePositive90>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	83 ed       	ldi	r24, 0xD3	; 211
 51e:	90 e3       	ldi	r25, 0x30	; 48
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
				//ServoRotateNegative90();
				_delay_ms(1000);
				breakCondition = 0;
 52c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <breakCondition>
				attempts = NOOFATTEMPTS;
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <attempts>
 536:	b4 ce       	rjmp	.-664    	; 0x2a0 <main+0x14>
			}
			
			else if(!attempts){
 538:	81 11       	cpse	r24, r1
 53a:	b2 ce       	rjmp	.-668    	; 0x2a0 <main+0x14>
				LCD_Clear();
 53c:	0e 94 32 01 	call	0x264	; 0x264 <LCD_Clear>
				LCD_setPosition(ROW1, COL4);
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
				LCD_sendString("LOCKED !");
 548:	83 e9       	ldi	r24, 0x93	; 147
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
				LCD_setPosition(ROW2, COL0);
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_setPosition>
				LCD_sendString("Wild Button Only!");
 558:	8c ea       	ldi	r24, 0xAC	; 172
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_sendString>
				do{
					Local_u8Key = KPD_GetPressedKey();
 560:	0e 94 60 00 	call	0xc0	; 0xc0 <KPD_GetPressedKey>
 564:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Local_u8Key>
				} while(Local_u8Key != '#');
 568:	83 32       	cpi	r24, 0x23	; 35
 56a:	d1 f7       	brne	.-12     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
				breakCondition = 0;
 56c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <breakCondition>
				attempts = NOOFATTEMPTS;
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <attempts>
 576:	94 ce       	rjmp	.-728    	; 0x2a0 <main+0x14>

00000578 <Servo_Init>:
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
}

void ServoRotateNegative90(){
	OCR1A = 150; //249
 578:	84 b1       	in	r24, 0x04	; 4
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	84 b9       	out	0x04, r24	; 4
 57e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 582:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 586:	87 e8       	ldi	r24, 0x87	; 135
 588:	93 e1       	ldi	r25, 0x13	; 19
 58a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 58e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 592:	82 e8       	ldi	r24, 0x82	; 130
 594:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 598:	8b e1       	ldi	r24, 0x1B	; 27
 59a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 59e:	08 95       	ret

000005a0 <ServoRotateZero>:
}

void ServoRotateZero(){
	OCR1A = 300; // 374
 5a0:	8c e2       	ldi	r24, 0x2C	; 44
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 5ac:	08 95       	ret

000005ae <ServoRotatePositive90>:
}

void ServoRotatePositive90(){
	OCR1A = 580; // 499
 5ae:	84 e4       	ldi	r24, 0x44	; 68
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 5b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 5ba:	08 95       	ret

000005bc <USART_Init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void USART_Init() {
	DDRB |= (1 << PORTB5); // Set PB5 as output (Arduino Uno pin 13)
 5bc:	84 b1       	in	r24, 0x04	; 4
 5be:	80 62       	ori	r24, 0x20	; 32
 5c0:	84 b9       	out	0x04, r24	; 4
	/* Set baud rate */
	UBRR0 = 103;
 5c2:	87 e6       	ldi	r24, 0x67	; 103
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 5ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 5ce:	88 e1       	ldi	r24, 0x18	; 24
 5d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 5d4:	86 e0       	ldi	r24, 0x06	; 6
 5d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 5da:	08 95       	ret

000005dc <USART_Receive>:
}

unsigned char USART_Receive(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 5dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5e0:	88 23       	and	r24, r24
 5e2:	e4 f7       	brge	.-8      	; 0x5dc <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
 5e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
